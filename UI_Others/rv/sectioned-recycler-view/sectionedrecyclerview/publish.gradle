apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

version '1.0.2'
group 'com.cruxlab'

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/sectionedrecyclerview-release.aar")
            groupId
            artifactId 'sectionedrecyclerview'
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    user = properties.getProperty('bintrayUser')
    key = properties.getProperty('bintrayApiKey')
    publications = ['Production']
    configurations = ['archives']
    override = true
    pkg {
        repo = 'SectionedRecyclerView'
        name = 'SectionedRecyclerView'
        userOrg = 'cruxlab'
        description = "A library that allows using sections with pinnable headers in RecyclerView."
        publish = true
        publicDownloadNumbers = true
        licenses = ['MIT']
        vcsUrl = 'https://github.com/crux-lab/sectioned-recycler-view.git'
        dryRun = false
        version {
            name = this.version
            desc = "${this.version}"
            released = new Date()
            vcsTag = this.version
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    source = android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}